[package]
name = "serde_encom"
version = "0.3.3"
authors = ["Dmitry Rodionov <gh@rdmtr.com>"]
description = "Official EnCom library"
documentation = "https://docs.rs/serde_encom/"
repository = "https://github.com/RoDmitry/serde_encom"
categories = ["encoding", "parser-implementations"]
keywords = ["encom", "serde", "serialization", "json"]
include = ["src"]
readme = "README.md"
license = "MIT OR Apache-2.0"
edition = "2021"

[lib]
name = "serde_encom"
path = "src/lib.rs"

[dependencies]
atoi_simd = "0.16"
debug_unsafe = "0.1"
indexmap = { version = "2", optional = true }
itoa = "1"
ryu = "1"
serde = { version = "1.0", default-features = false }

[dev-dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_bytes = "0.11"

############################## FEATURES ######################################

[features]
default = ["std"]

std = ["serde/std", "atoi_simd/std"]

# Provide integration for heap-allocated collections without depending on the
# rest of the Rust standard library.
# NOTE: Disabling both `std` *and* `alloc` features is not supported yet.
alloc = ["serde/alloc"]

# Make serde_encom::Map use a representation which maintains insertion order.
# This allows data to be read into a Value and written back to a JSON string
# while preserving the order of map keys in the input.
preserve_order = ["indexmap", "std"]

# Use sufficient precision when parsing fixed precision floats from JSON to
# ensure that they maintain accuracy when round-tripped through JSON. This comes
# at an approximately 2x performance cost for parsing floats compared to the
# default best-effort precision.
#
# Unlike arbitrary_precision, this feature makes f64 -> JSON -> f64 produce
# output identical to the input.
# float_roundtrip = []

# Use an arbitrary precision number representation for serde_encom::Number. This
# allows JSON numbers of arbitrary size/precision to be read into a Number and
# written back to a JSON string without loss of precision.
#
# Unlike float_roundtrip, this feature makes JSON -> serde_encom::Number -> JSON
# produce output identical to the input.
# arbitrary_precision = []

# Provide a RawValue type that can hold unprocessed JSON during deserialization.
# raw_value = []

# Provide a method disable_recursion_limit to parse arbitrarily deep JSON
# structures without any consideration for overflowing the stack. When using
# this feature, you will want to provide some other way to protect against stack
# overflows, such as by wrapping your Deserializer in the dynamically growing
# stack adapter provided by the serde_stacker crate. Additionally you will need
# to be careful around other recursive operations on the parsed result which may
# overflow the stack after deserialization has completed, including, but not
# limited to, Display and Debug and Drop impls.
# unbounded_depth = []
